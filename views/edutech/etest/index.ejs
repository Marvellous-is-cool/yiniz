<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Test Session</title>
    <link rel="icon" href="/images/favicon.ico" type="image/x-icon" />
    <link
      rel="stylesheet"
      href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css"
    />
    <link
      href="https://fonts.googleapis.com/css?family=Poppins:400,700&display=swap"
      rel="stylesheet"
    />
    <link rel="stylesheet" href="/css/edutech/etest/css/style.css" />
    <link rel="stylesheet" href="/css/animate.css" />
    <style>
      .header-buttons button {
        font-size: 14px;
        padding: 5px 10px;
      }

      #timer-container {
        padding: 20px;
        position: fixed;
        top: 0;
        right: 0;
      }

      .titlepage {
        font-family: "Atomic Age";
      }

      .questext {
        font-family: "Andika";
      }

      .selected-option {
        font-family: "Andika";
      }

      .optA,
      .optB,
      .optC,
      .optD {
        font-family: "Be Vietnam Pro";
      }

      /* Spinner animation */
      @keyframes windows11-loader {
        0% {
          transform: rotate(0deg);
        }
        100% {
          transform: rotate(360deg);
        }
      }

      /* Loader styles */
      .loading {
        border: 5px solid #0f9d58; /* Green color */
        border-top: 5px solid transparent; /* Transparent border top */
        border-radius: 50%; /* Circular shape */
        width: 30px; /* Spinner width */
        height: 30px; /* Spinner height */
        animation: windows11-loader 1.5s linear infinite; /* Animation */
        margin: auto;
      }

      /* .loading {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh; 
      } */
    </style>
    <script
      async
      src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-4993685121054900"
      crossorigin="anonymous"
    ></script>
  </head>
  <body class="main-layout">
    <header>
      <!-- header inner -->
      <div class="header">
        <div class="container">
          <div class="row align-items-center">
            <div class="col-md-3">
              <div class="logo" style="display: flex; flex-direction: column">
                <a href="#">
                  <img
                    class="logo1 w-25"
                    src="/images/edu/lincssalogo.jpg"
                    alt="#"
                  />
                </a>
                <li>
                  <b class="text-warning">LIN 312</b> |
                  <b class="text-light"> Online Test </b>
                </li>
              </div>
            </div>
            <div class="col-md-9 text-right">
              <div class="header-buttons">
                <button class="btn btn-dark mr-2 back-btn">Back</button>
                <button class="btn btn-success mr-2 next-btn">Next</button>
                <button class="submitBtn btn btn-danger" disabled="true">
                  Submit
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </header>
    <!-- end header inner -->
    <!-- end header -->
    <!-- banner -->
    <section class="banner_main"></section>
    <!-- end banner -->
    <!-- team -->
    <div class="team">
      <div class="container">
        <!-- Timer display -->
        <div class="text-center mt-3" id="timer-container"></div>
        <div id="questions-container">
          <p class="test_initiated_message text-danger d-none">
            Test Initiated,
            <b>MU: <small class="student_username"><%= username %></small>.</b>
            <br />
            Do not Refresh your page, else your test will be submitted
            automatically
          </p>
          <div
            class="loading_div text-center justify-content-center align-items-center p-5"
          >
            <div class="loading"></div>
            <p class="loading_text text-muted">
              Loading...
              <br />
              Questions will be loaded in a sec, unless your internet is slow
            </p>
          </div>
          <!-- Questions will be dynamically inserted here -->
        </div>
        <div class="row">
          <div class="col-md-12">
            <div class="header-buttons mt-1">
              <button class="btn btn-dark mr-2 back-btn">Back</button>
              <button class="btn btn-success mr-2 next-btn">Next</button>
            </div>
          </div>
        </div>
      </div>
    </div>
    <!-- footer -->
    <footer>
      <div class="footer">
        <div class="container">
          <div class="row">
            <div
              class="col-xl-3 col-lg-3 col-md-6 col-sm-6"
              style="display: flex; flex-direction: column"
            >
              <img
                class="logo1 w-25"
                src="/images/edu/lincssalogo.jpg"
                alt="#"
              />
              <ul class="about_us">
                <li>
                  <b class="text-warning">LIN 312</b> |
                  <b class="text-light"> Online Test </b>
                </li>
              </ul>
            </div>
          </div>
        </div>
      </div>
      <%- include('footer', { flashMessages: flashMessages }) %>
    </footer>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.min.js"></script>
    <script>
      document.addEventListener("DOMContentLoaded", function () {
        const questionsContainer = document.getElementById(
          "questions-container"
        );
        const submitButton = document.querySelector(".submitBtn");

        let correctAnswers = [];

        fetch("/edu/test/getQuestions")
          .then((response) => response.json())
          .then((data) => {
            document.querySelector(".loading_div").classList.add("d-none");
            document
              .querySelector(".test_initiated_message ")
              .classList.remove("d-none");
            const questions = data.questions;
            const testSessions = data.testSessions;

            questions.forEach((question, index) => {
              correctAnswers.push(question.correct_answer);
              const questionHTML = `
                <div class="row d_flex p-2">
                    <div class="col-md-6 offset-md-1 animate__animated question-container">
                        <div class="titlepage">
                            <h2>Question <b class="quesno">${index + 1}</b></h2>
                            <p class="questext"><b>${
                              question.question_text
                            }</b></p>
                            <h3 class="" style="border-bottom: 1px solid yellow">
                                <span class="btn btn-primary p-2 m-1 optA"><i class="opta">A</i>.<b class="optionA">${
                                  question.option_a
                                }</b></span>
                                <span class="btn btn-primary p-2 m-1 optB"><i class="optb">B</i>.<b class="optionB">${
                                  question.option_b
                                }</b></span>
                                <span class="btn btn-primary p-2 m-1 optC"><i class="optc">C</i>.<b class="optionC">${
                                  question.option_c
                                }</b></span>
                                <span class="btn btn-primary p-2 m-1 optD"><i class="optd">D</i>.<b class="optionD">${
                                  question.option_d
                                }</b></span>
                                <p class="selected-option d-none">Selected Option: <b></b></p>
                            </h3>
                        </div>
                    </div>
                </div>
              `;
              questionsContainer.insertAdjacentHTML("beforeend", questionHTML);
            });

            const questionContainers = document.querySelectorAll(
              ".question-container"
            );
            const optionButtons = document.querySelectorAll(".btn-primary");

            const selectedOptions = new Array(questionContainers.length).fill(
              null
            );

            function selectOption(optionElement) {
              const questionContainer = optionElement.closest(
                ".question-container"
              );
              const options =
                questionContainer.querySelectorAll(".btn-primary");
              options.forEach((option) => option.classList.remove("active"));
              optionElement.classList.add("active");

              const questionIndex =
                Array.from(questionContainers).indexOf(questionContainer);

              const selectedOption = optionElement.querySelector("i");
              const selectedOptionText = selectedOption
                ? selectedOption.textContent
                : "";
              selectedOptions[questionIndex] = selectedOptionText;

              const selectedOptionP =
                questionContainer.querySelector(".selected-option");
              const selectedOptionDisplay =
                questionContainer.querySelector(".selected-option b");
              selectedOptionDisplay.textContent =
                selectedOptions[questionIndex];
              selectedOptionP.classList.remove("d-none");
              selectedOptionP.style.opacity = "0";
              selectedOptionP.style.transition = "opacity 0.5s";
              setTimeout(() => {
                selectedOptionP.style.opacity = "1";
              }, 50);

              const allQuestionsAnswered = selectedOptions.every(
                (option) => option !== null
              );
              if (allQuestionsAnswered) {
                submitButton.removeAttribute("disabled");
              }
            }

            optionButtons.forEach((button) => {
              button.addEventListener("click", function (event) {
                const clickedElement = event.currentTarget;
                selectOption(clickedElement);
              });
            });

            const nextButtons = document.querySelectorAll(
              ".header-buttons .next-btn"
            );
            const backButtons = document.querySelectorAll(
              ".header-buttons .back-btn"
            );

            let currentQuestionIndex = 0;

            function scrollToTop() {
              var startPosition = window.pageYOffset;
              var distance = -startPosition;
              var duration = 1000;
              var start = null;

              window.requestAnimationFrame(step);

              function step(timestamp) {
                if (!start) start = timestamp;
                var progress = timestamp - start;
                window.scrollTo(
                  0,
                  easeInOutCubic(progress, startPosition, distance, duration)
                );
                if (progress < duration) {
                  window.requestAnimationFrame(step);
                }
              }

              function easeInOutCubic(t, b, c, d) {
                t /= d / 2;
                if (t < 1) return (c / 2) * t * t * t + b;
                t -= 2;
                return (c / 2) * (t * t * t + 2) + b;
              }
            }

            function showQuestions(startIndex) {
              for (let i = 0; i < questionContainers.length; i++) {
                if (i >= startIndex && i < startIndex + 5) {
                  questionContainers[i].classList.remove("d-none");
                } else {
                  questionContainers[i].classList.add("d-none");
                }
              }
            }

            showQuestions(currentQuestionIndex);

            nextButtons.forEach((nextButton) => {
              nextButton.addEventListener("click", function () {
                if (currentQuestionIndex < questionContainers.length - 5) {
                  currentQuestionIndex += 5;
                  showQuestions(currentQuestionIndex);
                  scrollToTop();
                }
              });
            });

            backButtons.forEach((backButton) => {
              backButton.addEventListener("click", function () {
                if (currentQuestionIndex >= 5) {
                  currentQuestionIndex -= 5;
                  showQuestions(currentQuestionIndex);
                  scrollToTop();
                }
              });
            });

            function calculateScore() {
              let score = 0;
              for (let i = 0; i < selectedOptions.length; i++) {
                const selectedOption = selectedOptions[i];
                const correctAnswer = correctAnswers[i];
                if (selectedOption === correctAnswer) {
                  score += 2;
                }
              }
              return score;
            }

            function updateScore() {
              const userScore = calculateScore();

              // Fetch to update user's score
              fetch("/edu/test/update-score", {
                method: "POST",
                headers: {
                  "Content-Type": "application/json",
                },
                body: JSON.stringify({
                  username:
                    document.querySelector(".student_username").textContent,
                  score: userScore,
                }),
              })
                .then((response) => {
                  if (!response.ok) {
                    throw new Error("Failed to update score");
                  }
                  // Redirect to session-ended page
                  window.location.href = "/edu/test/session-ended";
                })
                .catch((error) => {
                  console.error("Error updating score:", error);
                  // Handle error if needed
                });
            }

            submitButton.addEventListener("click", function () {
              alert("Are you sure? This action cannot be undone!");
              updateScore();
            });

            const timerContainer = document.getElementById("timer-container");

            function startTimer(startDate, endDate) {
              function updateTimer() {
                const now = new Date();
                const difference = endDate - now;
                const minutes = Math.floor(
                  (difference % (1000 * 60 * 60)) / (1000 * 60)
                );
                const seconds = Math.floor((difference % (1000 * 60)) / 1000);

                timerContainer.textContent = `${minutes
                  .toString()
                  .padStart(2, "0")}:${seconds.toString().padStart(2, "0")}`;

                if (minutes === 1) {
                  timerContainer.style.color = "red";
                }

                if (difference <= 0 || minutes <= 0) {
                  clearInterval(timerInterval);
                  timerContainer.textContent = "00:00";
                  timerContainer.style.color = "black";
                  alert("Test ended");
                  updateScore();
                }
              }

              updateTimer();
              const timerInterval = setInterval(updateTimer, 1000);
            }

            const endDateTime = new Date();
            endDateTime.setHours(testSessions[0].endhour, 0, 0, 0);

            const now = new Date();
            if (
              now !== endDateTime &&
              now.getTime() !== endDateTime.getTime() - 19 * 60 * 1000
            ) {
              const twentyMinutesLater = new Date(now);
              twentyMinutesLater.setMinutes(now.getMinutes() + 20);

              if (twentyMinutesLater <= endDateTime) {
                startTimer(now, twentyMinutesLater);
              } else {
                startTimer(now, endDateTime);
              }
            } else {
              timerContainer.textContent = "Test ended";
              updateScore();
            }

            window.addEventListener("beforeunload", function (event) {
              // Cancel the event
              event.preventDefault();
              // Chrome requires returnValue to be set
              event.returnValue = "";

              // Your custom logic here, such as showing a confirmation message
              const confirmationMessage =
                "You are attempting to refresh/leave the page. \n Your test will be submitted and your session will end!";
              event.returnValue = confirmationMessage; // For older browsers
              updateScore();
              return confirmationMessage;
            });
          })
          .catch((error) => console.error("Error fetching questions:", error));
      });
    </script>
  </body>
</html>
