<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>ML Analytics Dashboard - Yiniz Edu</title>
    <link rel="stylesheet" href="/css/edutech/style.css" />
    <style>
      .dashboard-container {
        max-width: 1200px;
        margin: 20px auto;
        padding: 20px;
      }

      .stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 20px;
        margin-bottom: 30px;
      }

      .stat-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      }

      .stat-number {
        font-size: 2.5rem;
        font-weight: bold;
        margin-bottom: 5px;
      }

      .stat-label {
        font-size: 0.9rem;
        opacity: 0.9;
      }

      .insights-section {
        background: white;
        border-radius: 10px;
        padding: 20px;
        margin-bottom: 20px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      }

      .attention-item {
        background: #fff3cd;
        border: 1px solid #ffeaa7;
        border-radius: 5px;
        padding: 15px;
        margin-bottom: 10px;
      }

      .attention-item.hard {
        background: #f8d7da;
        border-color: #f5c6cb;
      }

      .attention-item.easy {
        background: #d1ecf1;
        border-color: #bee5eb;
      }

      .question-search {
        width: 100%;
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 5px;
        margin-bottom: 20px;
      }

      .loading {
        text-align: center;
        padding: 40px;
      }

      .btn {
        background: #667eea;
        color: white;
        padding: 10px 20px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        margin: 5px;
      }

      .btn:hover {
        background: #5a6fd8;
      }

      .btn.secondary {
        background: #6c757d;
      }

      .progress-bar {
        width: 100%;
        height: 20px;
        background: #f0f0f0;
        border-radius: 10px;
        overflow: hidden;
        margin: 10px 0;
      }

      .progress-fill {
        height: 100%;
        background: linear-gradient(90deg, #667eea, #764ba2);
        transition: width 0.3s ease;
      }
    </style>
  </head>
  <body>
    <div class="dashboard-container">
      <h1>ü§ñ ML Analytics Dashboard</h1>
      <p>Real-time insights powered by AI analysis of student performance</p>

      <div id="loading" class="loading">
        <h3>Loading ML insights...</h3>
        <div class="progress-bar">
          <div class="progress-fill" style="width: 0%"></div>
        </div>
      </div>

      <div id="dashboard" style="display: none">
        <!-- Overview Stats -->
        <div class="stats-grid">
          <div class="stat-card">
            <div class="stat-number" id="totalQuestions">-</div>
            <div class="stat-label">Total Questions</div>
          </div>
          <div class="stat-card">
            <div class="stat-number" id="mlAnalyzed">-</div>
            <div class="stat-label">ML Analyzed</div>
          </div>
          <div class="stat-card">
            <div class="stat-number" id="accuracyRate">-</div>
            <div class="stat-label">Prediction Accuracy</div>
          </div>
          <div class="stat-card">
            <div class="stat-number" id="needsAttention">-</div>
            <div class="stat-label">Need Attention</div>
          </div>
        </div>

        <!-- Actions -->
        <div class="insights-section">
          <h3>üîß Actions</h3>
          <button class="btn" onclick="trainModels()">
            üöÄ Train ML Models
          </button>
          <button class="btn secondary" onclick="refreshData()">
            üîÑ Refresh Data
          </button>
          <button class="btn secondary" onclick="exportReport()">
            üìä Export Report
          </button>
        </div>

        <!-- Questions Needing Attention -->
        <div class="insights-section">
          <h3>‚ö†Ô∏è Questions Needing Attention</h3>
          <div id="attentionList">
            <!-- Will be populated by JavaScript -->
          </div>
        </div>

        <!-- Question Search & Analysis -->
        <div class="insights-section">
          <h3>üîç Question Analysis</h3>
          <input
            type="text"
            class="question-search"
            id="questionSearch"
            placeholder="Enter question ID to get detailed insights..."
          />
          <button class="btn" onclick="analyzeQuestion()">
            Analyze Question
          </button>

          <div id="questionAnalysis" style="display: none">
            <!-- Question analysis results will appear here -->
          </div>
        </div>
      </div>
    </div>

    <script>
      let currentInsights = null;

      // Load dashboard data on page load
      window.addEventListener("load", function () {
        loadDashboardData();
      });

      async function loadDashboardData() {
        try {
          updateProgress(25);

          const response = await fetch("/edu/insights/overall");
          const data = await response.json();

          updateProgress(75);

          if (data.error) {
            throw new Error(data.error);
          }

          currentInsights = data;
          populateDashboard(data);

          updateProgress(100);

          setTimeout(() => {
            document.getElementById("loading").style.display = "none";
            document.getElementById("dashboard").style.display = "block";
          }, 500);
        } catch (error) {
          console.error("Failed to load dashboard:", error);
          document.getElementById("loading").innerHTML = `
                    <h3 style="color: red;">Failed to load ML insights</h3>
                    <p>${error.message}</p>
                    <button class="btn" onclick="loadDashboardData()">Retry</button>
                `;
        }
      }

      function updateProgress(percent) {
        document.querySelector(".progress-fill").style.width = percent + "%";
      }

      function populateDashboard(data) {
        // Update stats
        document.getElementById("totalQuestions").textContent = data.total || 0;
        document.getElementById("mlAnalyzed").textContent =
          data.withPredictions || 0;
        document.getElementById("accuracyRate").textContent =
          (data.accuracyRate || 0) + "%";
        document.getElementById("needsAttention").textContent =
          data.needsAttention?.length || 0;

        // Populate attention list
        const attentionList = document.getElementById("attentionList");
        if (data.needsAttention && data.needsAttention.length > 0) {
          attentionList.innerHTML = data.needsAttention
            .map(
              (item) => `
                    <div class="attention-item ${
                      item.issue.includes("difficult") ? "hard" : "easy"
                    }">
                        <strong>Question ${item.id}</strong> - ${item.issue}
                        <br>
                        <small>${item.text}</small>
                        <br>
                        <strong>Success Rate: ${item.successRate}</strong> (${
                item.responses
              } responses)
                        <br>
                        <button class="btn" onclick="analyzeSpecificQuestion(${
                          item.id
                        })">üîç Analyze</button>
                    </div>
                `
            )
            .join("");
        } else {
          attentionList.innerHTML = "<p>‚úÖ All questions performing well!</p>";
        }
      }

      async function analyzeQuestion() {
        const questionId = document
          .getElementById("questionSearch")
          .value.trim();
        if (!questionId) {
          alert("Please enter a question ID");
          return;
        }

        analyzeSpecificQuestion(questionId);
      }

      async function analyzeSpecificQuestion(questionId) {
        try {
          const analysisDiv = document.getElementById("questionAnalysis");
          analysisDiv.style.display = "block";
          analysisDiv.innerHTML = "<p>Analyzing question...</p>";

          const response = await fetch(`/edu/insights/question/${questionId}`);
          const data = await response.json();

          if (data.error) {
            analysisDiv.innerHTML = `<p style="color: red;">${data.error}</p>`;
            return;
          }

          analysisDiv.innerHTML = `
                    <h4>üìä Question ${data.questionId} Analysis</h4>
                    
                    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin: 20px 0;">
                        <div style="background: #f8f9fa; padding: 15px; border-radius: 5px;">
                            <strong>Success Rate</strong><br>
                            <span style="font-size: 1.5em; color: ${
                              data.performance.successRate < "50%"
                                ? "red"
                                : "green"
                            }">
                                ${data.performance.successRate}
                            </span>
                        </div>
                        <div style="background: #f8f9fa; padding: 15px; border-radius: 5px;">
                            <strong>Average Score</strong><br>
                            <span style="font-size: 1.5em;">${
                              data.performance.avgScore
                            }</span>
                        </div>
                        <div style="background: #f8f9fa; padding: 15px; border-radius: 5px;">
                            <strong>Average Time</strong><br>
                            <span style="font-size: 1.5em;">${
                              data.performance.avgTime
                            }</span>
                        </div>
                        <div style="background: #f8f9fa; padding: 15px; border-radius: 5px;">
                            <strong>Total Attempts</strong><br>
                            <span style="font-size: 1.5em;">${
                              data.performance.totalAttempts
                            }</span>
                        </div>
                    </div>
                    
                    ${
                      data.mlInsights
                        ? `
                        <div style="background: #e7f3ff; padding: 15px; border-radius: 5px; margin: 15px 0;">
                            <h5>ü§ñ AI Insights</h5>
                            <p><strong>Calculated Difficulty:</strong> 
                               <span style="background: ${getDifficultyColor(
                                 data.mlInsights.calculatedDifficulty
                               )}; 
                                      color: white; padding: 3px 8px; border-radius: 3px;">
                                   ${data.mlInsights.calculatedDifficulty}
                               </span>
                               (${data.mlInsights.confidence} confidence)
                            </p>
                            
                            ${
                              data.mlInsights.recommendations.length > 0
                                ? `
                                <p><strong>üîç Recommendations:</strong></p>
                                <ul>${data.mlInsights.recommendations
                                  .map((rec) => `<li>${rec}</li>`)
                                  .join("")}</ul>
                            `
                                : ""
                            }
                            
                            ${
                              data.mlInsights.commonMistakes.length > 0
                                ? `
                                <p><strong>‚ùå Common Mistakes:</strong></p>
                                <ul>${data.mlInsights.commonMistakes
                                  .map(
                                    (mistake) => `
                                    <li>"${mistake.mistake_text}" (${mistake.frequency} students)</li>
                                `
                                  )
                                  .join("")}</ul>
                            `
                                : ""
                            }
                        </div>
                    `
                        : "<p><em>Not enough data for AI analysis yet (need 10+ responses)</em></p>"
                    }
                    
                    <details style="margin-top: 20px;">
                        <summary><strong>üìù Recent Student Responses (${
                          data.studentResponses?.length || 0
                        })</strong></summary>
                        <div style="max-height: 300px; overflow-y: auto; margin-top: 10px;">
                            ${
                              data.studentResponses
                                ?.map(
                                  (resp) => `
                                <div style="border: 1px solid #ddd; padding: 10px; margin: 5px 0; border-radius: 3px;">
                                    <strong>${resp.student}</strong> (${
                                    resp.matricNumber
                                  }) - 
                                    Score: ${Math.round(resp.score * 100)}% - 
                                    Time: ${resp.timeSpent}
                                    <br>
                                    <small style="color: #666;">"${
                                      resp.answer
                                    }"</small>
                                    <br>
                                    <small>Submitted: ${
                                      resp.submittedAt
                                    }</small>
                                </div>
                            `
                                )
                                .join("") || "<p>No responses yet</p>"
                            }
                        </div>
                    </details>
                `;
        } catch (error) {
          console.error("Failed to analyze question:", error);
          document.getElementById(
            "questionAnalysis"
          ).innerHTML = `<p style="color: red;">Failed to analyze question: ${error.message}</p>`;
        }
      }

      function getDifficultyColor(difficulty) {
        switch (difficulty) {
          case "easy":
            return "#28a745";
          case "medium":
            return "#ffc107";
          case "hard":
            return "#dc3545";
          default:
            return "#6c757d";
        }
      }

      async function trainModels() {
        if (
          !confirm(
            "This will retrain the AI models with latest data. Continue?"
          )
        )
          return;

        try {
          const button = event.target;
          button.disabled = true;
          button.textContent = "üîÑ Training...";

          const response = await fetch("/edu/ml/train", { method: "POST" });
          const result = await response.json();

          if (result.error) {
            throw new Error(result.error);
          }

          alert("‚úÖ Model training initiated successfully!");
        } catch (error) {
          console.error("Training failed:", error);
          alert("‚ùå Training failed: " + error.message);
        } finally {
          const button = event.target;
          button.disabled = false;
          button.textContent = "üöÄ Train ML Models";
        }
      }

      async function refreshData() {
        document.getElementById("dashboard").style.display = "none";
        document.getElementById("loading").style.display = "block";
        document.getElementById("loading").innerHTML = `
                <h3>Refreshing data...</h3>
                <div class="progress-bar"><div class="progress-fill" style="width: 0%"></div></div>
            `;

        await loadDashboardData();
      }

      function exportReport() {
        if (!currentInsights) return;

        const report = {
          generatedAt: new Date().toISOString(),
          summary: currentInsights,
          timestamp: Date.now(),
        };

        const blob = new Blob([JSON.stringify(report, null, 2)], {
          type: "application/json",
        });
        const url = URL.createObjectURL(blob);
        const a = document.createElement("a");
        a.href = url;
        a.download = `ml-insights-report-${
          new Date().toISOString().split("T")[0]
        }.json`;
        a.click();
        URL.revokeObjectURL(url);
      }
    </script>
  </body>
</html>
